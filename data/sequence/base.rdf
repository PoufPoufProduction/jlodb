<?xml version="1.0"?>
<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
         xmlns:dct="http://purl.org/dc/terms/">


    <!-- BASE 2: 2[a-z] -->

    <rdf:Description>
        <dct:identifier>211</dct:identifier>
        <dct:title xml:lang="fr-FR">En base 2, évaluer, sans contrainte de temps, des quantités comprise entre 1 et 11.</dct:title>
        <dct:description><![CDATA["time":0,"template":"keypad2.html","input":{"digit":2,"speed":3000},"regexp":{"input": { "from": "([^ ]+)","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"gen":"function(){var a=Math.floor(Math.random()*3)+1, b=a, ret=\\\"\\\"; while(a>0) { if (ret.length) { ret+=\\\" \\\"; } if (a>=8) { ret+=\\\"08c\\\"; a-=8; } else if (a>=4) { ret+=\\\"04b\\\"; a-=4; } else if (a>=2) { ret+=\\\"02b\\\"; a-=2; } else { ret+=\\\"01b\\\"; a=0; } } return [ret, b.toString(2)];}","class":"wrong gray h12","font":2.9]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 2</b> ?"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>2111</dct:identifier>
        <dct:title xml:lang="fr-FR">En base 2, évaluer, sans contrainte de temps, des quantités comprise entre 1 et 111.</dct:title>
        <dct:description><![CDATA["time":0,"template":"keypad2.html","input":{"digit":3,"speed":3000},"regexp":{"input": { "from": "([^ ]+)","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"gen":"function(){var a=Math.floor(Math.random()*7)+1, b=a, ret=\\\"\\\"; while(a>0) { if (ret.length) { ret+=\\\" \\\"; } if (a>=8) { ret+=\\\"08c\\\"; a-=8; } else if (a>=4) { ret+=\\\"04b\\\"; a-=4; } else if (a>=2) { ret+=\\\"02b\\\"; a-=2; } else { ret+=\\\"01b\\\"; a=0; } } return [ret, b.toString(2)];}","class":"wrong gray h12","font":1.9]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 2</b> ?"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>21111</dct:identifier>
        <dct:title xml:lang="fr-FR">En base 2, évaluer, sans contrainte de temps, des quantités comprise entre 1 et 1111.</dct:title>
        <dct:description><![CDATA["time":0,"template":"keypad2.html","input":{"digit":4,"speed":3000},"regexp":{"input": { "from": "([^ ]+)","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"gen":"function(){var a=Math.floor(Math.random()*15)+1, b=a, ret=\\\"\\\"; while(a>0) { if (ret.length) { ret+=\\\" \\\"; } if (a>=8) { ret+=\\\"08c\\\"; a-=8; } else if (a>=4) { ret+=\\\"04b\\\"; a-=4; } else if (a>=2) { ret+=\\\"02b\\\"; a-=2; } else { ret+=\\\"01b\\\"; a=0; } } return [ret, b.toString(2)];}","class":"wrong gray h12","font":1.4]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 2</b> ?"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>23</dct:identifier>
        <dct:title xml:lang="fr-FR">En base 10, évaluer, sans contrainte de temps, des quantités comprise entre 1 et 11.</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":1,"speed":3000},"regexp":{"input": { "from": "([^ ]+)","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"gen":"function(){var a=Math.floor(Math.random()*3)+1, b=a, ret=\\\"\\\"; while(a>0) { if (ret.length) { ret+=\\\" \\\"; } if (a>=8) { ret+=\\\"08c\\\"; a-=8; } else if (a>=4) { ret+=\\\"04b\\\"; a-=4; } else if (a>=2) { ret+=\\\"02b\\\"; a-=2; } else { ret+=\\\"01b\\\"; a=0; } } return [ret, b.toString(10)];}","class":"wrong gray h12","font":2.9]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 10</b> ?"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>27</dct:identifier>
        <dct:title xml:lang="fr-FR">En base 10, évaluer, sans contrainte de temps, des quantités comprise entre 1 et 111.</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":1,"speed":3000},"regexp":{"input": { "from": "([^ ]+)","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"gen":"function(){var a=Math.floor(Math.random()*7)+1, b=a, ret=\\\"\\\"; while(a>0) { if (ret.length) { ret+=\\\" \\\"; } if (a>=8) { ret+=\\\"08c\\\"; a-=8; } else if (a>=4) { ret+=\\\"04b\\\"; a-=4; } else if (a>=2) { ret+=\\\"02b\\\"; a-=2; } else { ret+=\\\"01b\\\"; a=0; } } return [ret, b.toString(10)];}","class":"wrong gray h12","font":1.9]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 10</b> ?"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>
    
    <rdf:Description>
        <dct:identifier>27l</dct:identifier>
        <dct:title xml:lang="fr-FR">Convertir en base 10, sans contrainte de temps, un nombre binaire (compris entre 000 et 111) à l'aide de sa représentation graphique.</dct:title>
        <dct:description><![CDATA["time":0,"regexp":{"input": { "from": "s([^ ^e]+)e","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"input":{"digit":1,"speed":3000},"values":[["s00es00es00e000","0"],["s00es00es01be001","1"],["s00es02bes00e010","2"],["s00es02bes01be011","3"],["s04bes00es00e100","4"],["s04bes00es01be101","5"],["s04bes02bes00e110","6"],["s04bes02bes01be111","7"]],"class":"wrong gray h12","font":1.2]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 10</b> ?"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>27n</dct:identifier>
        <dct:title xml:lang="fr-FR">Convertir en base 10, sans contrainte de temps, un nombre binaire (compris entre 000 et 111).</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":1,"speed":3000},"values":[["000","0"],["001","1"],["010","2"],["011","3"],["100","4"],["101","5"],["110","6"],["111","7"]],"class":"wrong gray h12","font":2]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Convertir la valeur <b>en base 10</b>"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>27bn</dct:identifier>
        <dct:title xml:lang="fr-FR">Convertir en base 10, sans contrainte de temps, un nombre binaire (compris entre 000 et 111) muni d'un bitmap graphique.</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":1,"speed":3000},"gen":"function(){var d=3, v=Math.floor(Math.random()*Math.pow(2,d)), b=v.toString(2); while (b.length<d) { b='0'+b; } var ret=\\\"<div style='width:3.2em;'><svg xmlns='http://www.w3.org/2000/svg' width='100%' height='100%' viewBox='0 0 320 100'><defs><style>rect{fill:black;stroke:black;stroke-width:2}rect.w{fill:white}.wrong rect.b{fill:red}.good rect.b{fill:#0F0;}</style></defs>\\\"; for (var i=d-1; i>=0; i--) { ret+=\\\"<rect x='\\\"+(21+i*100)+\\\"' y='1' width='98' height='98' class='\\\"+(b[i]=='1'?\\\"b\\\":\\\"w\\\")+\\\"'/>\\\"; ret+=\\\"<text transform='translate(\\\"+(41+i*100)+\\\",85)' style='font-size:100px;fill:\\\"+(b[i]=='1'?\\\"white\\\":\\\"black\\\")+\\\";'>\\\"+b[i]+\\\"</text>\\\"; } ret+=\\\"</svg></div>\\\"; return [ret, v];}","class":"alpha gray p02","font":2]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Convertir la valeur <b>en base 10</b>"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>27b</dct:identifier>
        <dct:title xml:lang="fr-FR">Convertir en base 10, sans contrainte de temps, un bitmap graphique (compris entre 000 et 111).</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":1,"speed":3000},"gen":"function(){var d=3, v=Math.floor(Math.random()*Math.pow(2,d)), b=v.toString(2); while (b.length<d) { b='0'+b; } var ret=\\\"<div style='width:3.2em;'><svg xmlns='http://www.w3.org/2000/svg' width='100%' height='100%' viewBox='0 0 320 100'><defs><style>rect{fill:black;stroke:black;stroke-width:2}rect.w{fill:white}.wrong rect.b{fill:red}.good rect.b{fill:#0F0;}</style></defs>\\\"; for (var i=d-1; i>=0; i--) { ret+=\\\"<rect x='\\\"+(21+i*100)+\\\"' y='1' width='98' height='98' class='\\\"+(b[i]=='1'?\\\"b\\\":\\\"w\\\")+\\\"'/>\\\"; } ret+=\\\"</svg></div>\\\"; return [ret, v];}","class":"alpha gray p02","font":2]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Evaluer le bitmap <b>en base 10</b> (noir=1, blanc=0)"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>215</dct:identifier>
        <dct:title xml:lang="fr-FR">En base 10, évaluer, sans contrainte de temps, des quantités comprise entre 1 et 1111.</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":2,"speed":3000},"regexp":{"input": { "from": "([^ ]+)","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"gen":"function(){var a=Math.floor(Math.random()*15)+1, b=a, ret=\\\"\\\"; while(a>0) { if (ret.length) { ret+=\\\" \\\"; } if (a>=8) { ret+=\\\"08c\\\"; a-=8; } else if (a>=4) { ret+=\\\"04b\\\"; a-=4; } else if (a>=2) { ret+=\\\"02b\\\"; a-=2; } else { ret+=\\\"01b\\\"; a=0; } } return [ret, b.toString(10)];}","class":"wrong gray h12","font":1.4]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 10</b> ?"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>
    
    <rdf:Description>
        <dct:identifier>215l</dct:identifier>
        <dct:title xml:lang="fr-FR">Convertir en base 10, sans contrainte de temps, un nombre binaire (compris entre 0000 et 1111) à l'aide de sa représentation graphique.</dct:title>
        <dct:description><![CDATA["time":0,"regexp":{"input": { "from": "s([^ ^e]+)e","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"input":{"digit":2,"speed":3000},"values":[["s00es00es00es00e0000","0"],["s00es00es00es01be0001","1"],["s00es00es02bes00e0010","2"],["s00es00es02bes01be0011","3"],["s00es04bes00es00e0100","4"],["s00es04bes00es01be0101","5"],["s00es04bes02bes00e0110","6"],["s00es04bes02bes01be0111","7"],["s08ces00es00es00e1000","8"],["s08ces00es00es01be1001","9"],["s08ces00es02bes00e1010","10"],["s08ces00es02bes01be1011","11"],["s08ces04bes00es00e1100","12"],["s08ces04bes00es01be1101","13"],["s08ces04bes02bes00e1110","14"],["s08ces04bes02bes01be1111","15"]],"class":"wrong gray h12","font":1]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 10</b> ?"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>215n</dct:identifier>
        <dct:title xml:lang="fr-FR">Convertir en base 10, sans contrainte de temps, un nombre binaire (compris entre 0000 et 1111).</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":2,"speed":3000},"values":[["0000","0"],["0001","1"],["0010","2"],["0011","3"],["0100","4"],["0101","5"],["0110","6"],["0111","7"],["1000","8"],["1001","9"],["1010","10"],["1011","11"],["1100","12"],["1101","13"],["1110","14"],["1111","15"]],"class":"wrong gray h12","font":2]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Convertir la valeur <b>en base 10</b>"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>
    
    <rdf:Description>
        <dct:identifier>215bn</dct:identifier>
        <dct:title xml:lang="fr-FR">Convertir en base 10, sans contrainte de temps, un nombre binaire (compris entre 0000 et 1111) muni d'un bitmap graphique.</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":2,"speed":3000},"gen":"function(){var d=4, v=Math.floor(Math.random()*Math.pow(2,d)), b=v.toString(2); while (b.length<d) { b='0'+b; } var ret=\\\"<div style='width:4.2em;'><svg xmlns='http://www.w3.org/2000/svg' width='100%' height='100%' viewBox='0 0 420 100'><defs><style>rect{fill:black;stroke:black;stroke-width:2}rect.w{fill:white}.wrong rect.b{fill:red}.good rect.b{fill:#0F0;}</style></defs>\\\"; for (var i=d-1; i>=0; i--) { ret+=\\\"<rect x='\\\"+(21+i*100)+\\\"' y='1' width='98' height='98' class='\\\"+(b[i]=='1'?\\\"b\\\":\\\"w\\\")+\\\"'/>\\\"; ret+=\\\"<text transform='translate(\\\"+(41+i*100)+\\\",85)' style='font-size:100px;fill:\\\"+(b[i]=='1'?\\\"white\\\":\\\"black\\\")+\\\";'>\\\"+b[i]+\\\"</text>\\\"; } ret+=\\\"</svg></div>\\\"; return [ret, v];}","class":"alpha gray p02","font":1.4]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Convertir la valeur <b>en base 10</b>"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>215b</dct:identifier>
        <dct:title xml:lang="fr-FR">Convertir en base 10, sans contrainte de temps, un bitmap graphique (compris entre 0000 et 1111).</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":2,"speed":3000},"gen":"function(){var d=4, v=Math.floor(Math.random()*Math.pow(2,d)), b=v.toString(2); while (b.length<d) { b='0'+b; } var ret=\\\"<div style='width:4.2em;'><svg xmlns='http://www.w3.org/2000/svg' width='100%' height='100%' viewBox='0 0 420 100'><defs><style>rect{fill:black;stroke:black;stroke-width:2}rect.w{fill:white}.wrong rect.b{fill:red}.good rect.b{fill:#0F0;}</style></defs>\\\"; for (var i=d-1; i>=0; i--) { ret+=\\\"<rect x='\\\"+(21+i*100)+\\\"' y='1' width='98' height='98' class='\\\"+(b[i]=='1'?\\\"b\\\":\\\"w\\\")+\\\"'/>\\\"; } ret+=\\\"</svg></div>\\\"; return [ret, v];}","class":"alpha gray p02","font":1.4]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Evaluer le bitmap <b>en base 10</b> (noir=1, blanc=0)"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>21111</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>
    

    <rdf:Description>
        <dct:identifier>2p4</dct:identifier>
        <dct:title xml:lang="fr-FR">Calculer, sans contrainte de temps, les puissances de 2 (comprises entre 2^0 et 2^4).</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":2,"speed":3000},"values":[["2^0","1"],["2^1","2"],["2^2","4"],["2^3","8"],["2^4","16"]],"class":"wrong gray h12","font":3]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>2p8</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>2p4x</dct:identifier>
        <dct:title xml:lang="fr-FR">Calculer, en moins de 40 secondes, les puissances de 2 (comprises entre 2^0 et 2^4).</dct:title>
        <dct:description><![CDATA["time":2,"input":{"digit":2,"speed":3000},"values":[["2^0","1"],["2^1","2"],["2^2","4"],["2^3","8"],["2^4","16"]],"class":"wrong gray h12","font":3]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>2p8</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>2p8</dct:identifier>
        <dct:title xml:lang="fr-FR">Calculer, sans contrainte de temps, les puissances de 2 (comprises entre 2^0 et 2^8).</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":3,"speed":3000},"values":[["2^0","1"],["2^1","2"],["2^2","4"],["2^3","8"],["2^4","16"],["2^5","32"],["2^6","64"],["2^7","128"],["2^8","256"]],"class":"wrong gray h12","font":3]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>3</dct:type>
        <dct:alternative>2p8</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>2p8x</dct:identifier>
        <dct:title xml:lang="fr-FR">Calculer, en moins de 40 secondes, les puissances de 2 (comprises entre 2^0 et 2^8).</dct:title>
        <dct:description><![CDATA["time":2,"input":{"digit":3,"speed":3000},"values":[["2^0","1"],["2^1","2"],["2^2","4"],["2^3","8"],["2^4","16"],["2^5","32"],["2^6","64"],["2^7","128"],["2^8","256"]],"class":"wrong gray h12","font":3]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>3</dct:type>
        <dct:alternative>2p8</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>


    <rdf:Description>
        <dct:identifier>h15</dct:identifier>
        <dct:title xml:lang="fr-FR">Convertir en base 16, sans contrainte de temps, un nombre binaire (compris entre 0000 et 1111).</dct:title>
        <dct:description><![CDATA["time":0,"template":"keypad16.html","input":{"digit":1,"speed":3000},"values":[["0000","0"],["0001","1"],["0010","2"],["0011","3"],["0100","4"],["0101","5"],["0110","6"],["0111","7"],["1000","8"],["1001","9"],["1010","a"],["1011","b"],["1100","c"],["1101","d"],["1110","e"],["1111","f"]],"class":"wrong gray h12","font":2]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Convertir la valeur <b>en base 16</b>"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>3</dct:type>
        <dct:alternative>h15</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>h15a</dct:identifier>
        <dct:title xml:lang="fr-FR">En base 16, évaluer, sans contrainte de temps, des quantités comprise entre 1 et 1111.</dct:title>
        <dct:description><![CDATA["time":0,"template":"keypad16.html","input":{"digit":1,"speed":3000},"regexp":{"input": { "from": "([^ ]+)","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"gen":"function(){var a=Math.floor(Math.random()*15)+1, b=a, ret=\\\"\\\"; while(a>0) { if (ret.length) { ret+=\\\" \\\"; } if (a>=8) { ret+=\\\"08c\\\"; a-=8; } else if (a>=4) { ret+=\\\"04b\\\"; a-=4; } else if (a>=2) { ret+=\\\"02b\\\"; a-=2; } else { ret+=\\\"01b\\\"; a=0; } } return [ret, b.toString(16)];}","class":"wrong gray h12","font":1.2]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 16</b> ?<br/>Pour rappel: (10=0xA) (11=0xB) (12=0xC) (13=0xD) (14=0XE) (15=0XF)"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>3</dct:type>
        <dct:alternative>h15</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>h15l</dct:identifier>
        <dct:title xml:lang="fr-FR">Convertir en base 16, sans contrainte de temps, un nombre binaire (compris entre 0000 et 1111) à l'aide de sa représentation graphique.</dct:title>
        <dct:description><![CDATA["time":0,"regexp":{"input": { "from": "s([^ ^e]+)e","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"template":"keypad16.html","input":{"digit":1,"speed":3000},"values":[["s00es00es00es00e0000","0"],["s00es00es00es01be0001","1"],["s00es00es02bes00e0010","2"],["s00es00es02bes01be0011","3"],["s00es04bes00es00e0100","4"],["s00es04bes00es01be0101","5"],["s00es04bes02bes00e0110","6"],["s00es04bes02bes01be0111","7"],["s08ces00es00es00e1000","8"],["s08ces00es00es01be1001","9"],["s08ces00es02bes00e1010","a"],["s08ces00es02bes01be1011","b"],["s08ces04bes00es00e1100","c"],["s08ces04bes00es01be1101","d"],["s08ces04bes02bes00e1110","e"],["s08ces04bes02bes01be1111","f"]],"class":"wrong gray h12","font":0.9]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 16</b> ?"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>h15</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>
    
    <rdf:Description>
        <dct:identifier>h15bn</dct:identifier>
        <dct:title xml:lang="fr-FR">Convertir en base 16, sans contrainte de temps, un nombre binaire (compris entre 0000 et 1111) muni d'un bitmap graphique.</dct:title>
        <dct:description><![CDATA["time":0,"template":"keypad16.html","input":{"digit":1,"speed":3000},"gen":"function(){var d=4, v=Math.floor(Math.random()*Math.pow(2,d)), b=v.toString(2); while (b.length<d) { b='0'+b; } var ret=\\\"<div style='width:4.2em;'><svg xmlns='http://www.w3.org/2000/svg' width='100%' height='100%' viewBox='0 0 420 100'><defs><style>rect{fill:black;stroke:black;stroke-width:2}rect.w{fill:white}.wrong rect.b{fill:red}.good rect.b{fill:#0F0;}</style></defs>\\\"; for (var i=d-1; i>=0; i--) { ret+=\\\"<rect x='\\\"+(21+i*100)+\\\"' y='1' width='98' height='98' class='\\\"+(b[i]=='1'?\\\"b\\\":\\\"w\\\")+\\\"'/>\\\"; ret+=\\\"<text transform='translate(\\\"+(41+i*100)+\\\",85)' style='font-size:100px;fill:\\\"+(b[i]=='1'?\\\"white\\\":\\\"black\\\")+\\\";'>\\\"+b[i]+\\\"</text>\\\"; } ret+=\\\"</svg></div>\\\"; return [ret, v.toString(16)];}","class":"alpha gray p02","font":1.4]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Convertir la valeur <b>en base 16</b>"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>3</dct:type>
        <dct:alternative>h15</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>h15b</dct:identifier>
        <dct:title xml:lang="fr-FR">Convertir en base 16, sans contrainte de temps, un bitmap graphique (compris entre 0000 et 1111).</dct:title>
        <dct:description><![CDATA["time":0,"template":"keypad16.html","input":{"digit":1,"speed":3000},"gen":"function(){var d=4, v=Math.floor(Math.random()*Math.pow(2,d)), b=v.toString(2); while (b.length<d) { b='0'+b; } var ret=\\\"<div style='width:4.2em;'><svg xmlns='http://www.w3.org/2000/svg' width='100%' height='100%' viewBox='0 0 420 100'><defs><style>rect{fill:black;stroke:black;stroke-width:2}rect.w{fill:white}.wrong rect.b{fill:red}.good rect.b{fill:#0F0;}</style></defs>\\\"; for (var i=d-1; i>=0; i--) { ret+=\\\"<rect x='\\\"+(21+i*100)+\\\"' y='1' width='98' height='98' class='\\\"+(b[i]=='1'?\\\"b\\\":\\\"w\\\")+\\\"'/>\\\"; } ret+=\\\"</svg></div>\\\"; return [ret, v.toString(16)];}","class":"alpha gray p02","font":1.4]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Evaluer le bitmap <b>en base 16</b> (noir=1, blanc=0)"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>4</dct:type>
        <dct:alternative>h15</dct:alternative>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>
 
 
    <!-- BASE 8: 8[0-9]+ -->

    <rdf:Description>
        <dct:identifier>8020</dct:identifier>
        <dct:title xml:lang="fr-FR">En base 8, évaluer, sans contrainte de temps, des quantités comprise entre 1 et 16.</dct:title>
        <dct:description><![CDATA["time":0,"template":"keypad8.html","input":{"digit":3,"speed":3000},"regexp":{"input": { "from": "([^ ]+)","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"gen":"function(){var a=Math.floor(Math.random()*16)+1, b=a, ret=\\\"\\\"; while(a>0) { if (ret.length) { ret+=\\\" \\\"; } if (a>=64) { ret+=\\\"64\\\"; a-=64; } else if (a>=32) { ret+=\\\"32\\\"; a-=32; } else if (a>=24) { ret+=\\\"24\\\"; a-=24; } else if (a>=16) { ret+=\\\"16b\\\"; a-=16; } else if (a>=8) { ret+=\\\"08b\\\"; a-=8; } else { ret+=\\\"0\\\"+a; a=0; } } return [ret, [ b.toString(8), \\\"0\\\"+b.toString(8)]];}","class":"wrong gray h12","font":2.9]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 8</b> ?"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>80177</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>80100</dct:identifier>
        <dct:title xml:lang="fr-FR">En base 8, évaluer, sans contrainte de temps, des quantités comprise entre 1 et 64.</dct:title>
        <dct:description><![CDATA["time":0,"template":"keypad8.html","input":{"digit":3,"speed":3000},"regexp":{"input": { "from": "([^ ]+)","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"gen":"function(){var a=Math.floor(Math.random()*64)+1, b=a, ret=\\\"\\\"; while(a>0) { if (ret.length) { ret+=\\\" \\\"; } if (a>=64) { ret+=\\\"64\\\"; a-=64; } else if (a>=32) { ret+=\\\"32\\\"; a-=32; } else if (a>=24) { ret+=\\\"24\\\"; a-=24; } else if (a>=16) { ret+=\\\"16b\\\"; a-=16; } else if (a>=8) { ret+=\\\"08b\\\"; a-=8; } else { ret+=\\\"0\\\"+a; a=0; } } return [ret, [ b.toString(8), \\\"0\\\"+b.toString(8)]];}","class":"wrong gray h12","font":1.9]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 8</b> ?"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>80177</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>80177</dct:identifier>
        <dct:title xml:lang="fr-FR">En base 8, évaluer, sans contrainte de temps, des quantités comprise entre 1 et 127.</dct:title>
        <dct:description><![CDATA["time":0,"template":"keypad8.html","input":{"digit":4,"speed":3000},"regexp":{"input": { "from": "([^ ]+)","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"gen":"function(){var a=Math.floor(Math.random()*127)+1, b=a, ret=\\\"\\\"; while(a>0) { if (ret.length) { ret+=\\\" \\\"; } if (a>=64) { ret+=\\\"64\\\"; a-=64; } else if (a>=32) { ret+=\\\"32\\\"; a-=32; } else if (a>=24) { ret+=\\\"24\\\"; a-=24; } else if (a>=16) { ret+=\\\"16b\\\"; a-=16; } else if (a>=8) { ret+=\\\"08b\\\"; a-=8; } else { ret+=\\\"0\\\"+a; a=0; } } return [ret, [ b.toString(8), \\\"0\\\"+b.toString(8)]];}","class":"wrong gray h12","font":1.4]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 8</b> ?"]]></dct:description>
        <dct:extent>1</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>1</dct:type>
        <dct:alternative>80177</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>


    <rdf:Description>
        <dct:identifier>816</dct:identifier>
        <dct:title xml:lang="fr-FR">En base 10, évaluer, sans contrainte de temps, des quantités comprise entre 1 et 16.</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":2,"speed":3000},"regexp":{"input": { "from": "([^ ]+)","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"gen":"function(){var a=Math.floor(Math.random()*16)+1, b=a, ret=\\\"\\\"; while(a>0) { if (ret.length) { ret+=\\\" \\\"; } if (a>=64) { ret+=\\\"64\\\"; a-=64; } else if (a>=32) { ret+=\\\"32\\\"; a-=32; } else if (a>=24) { ret+=\\\"24\\\"; a-=24; } else if (a>=16) { ret+=\\\"16b\\\"; a-=16; } else if (a>=8) { ret+=\\\"08b\\\"; a-=8; } else { ret+=\\\"0\\\"+a; a=0; } } return [ret, b.toString(10)];}","class":"wrong gray h12","font":2.9]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 10</b> ?"]]></dct:description>
        <dct:extent>2</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>2</dct:type>
        <dct:alternative>80177</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>

    <rdf:Description>
        <dct:identifier>864</dct:identifier>
        <dct:title xml:lang="fr-FR">En base 10, évaluer, sans contrainte de temps, des quantités comprise entre 1 et 64.</dct:title>
        <dct:description><![CDATA["time":0,"input":{"digit":2,"speed":3000},"regexp":{"input": { "from": "([^ ]+)","to":"<div class=\\\"char\\\"><img src=\\\"res/img/numbers/box/box$1.svg\\\"/></div>"} },"gen":"function(){var a=Math.floor(Math.random()*64)+1, b=a, ret=\\\"\\\"; while(a>0) { if (ret.length) { ret+=\\\" \\\"; } if (a>=64) { ret+=\\\"64\\\"; a-=64; } else if (a>=32) { ret+=\\\"32\\\"; a-=32; } else if (a>=24) { ret+=\\\"24\\\"; a-=24; } else if (a>=16) { ret+=\\\"16b\\\"; a-=16; } else if (a>=8) { ret+=\\\"08b\\\"; a-=8; } else { ret+=\\\"0\\\"+a; a=0; } } return [ret, b.toString(10)];}","class":"wrong gray h12","font":1.8]]></dct:description>
        <dct:description xml:lang="fr-FR"><![CDATA[,"comment":"Quel est le nombre de cubes <b>en base 10</b> ?"]]></dct:description>
        <dct:extent>2</dct:extent>
        <dct:subject>numeration</dct:subject>
        <dct:educationLevel>3</dct:educationLevel>
        <dct:type>3</dct:type>
        <dct:alternative>80177</dct:alternative>
        <dct:source>res/img/numbers/box/box*.svg</dct:source>
        <dct:isPartOf>base</dct:isPartOf>
    </rdf:Description>
 
</rdf:RDF>
